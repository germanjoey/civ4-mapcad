Big Ticket TODO:

- method of assigning a fixed set of resources/weights to a mask, one at a time - allocation function
- is there a good way of applying a mask to a bunch of starts? a "apply_mask_to_starts" command or something like that? 
- balance commands
- documentation
- tutorials
- apply_shape_to_mask
- new_mask_from_magic_wand
- test difference/merge
- tests

land allocation method
1.) find starts
2.) for each start:
    - calculate distance between them to calculate average distance
    - assign tiles
        - 1.) generate a soft circle mask around them based on average distance somehow
        - 2.) calculate a "path distance" to each tile
            - breadth-first search, like novice's tool
            - essentially allocates one tile at a time per civ based on closest distance
            - e.g. coast tiles have a distance of "2", hills 1.4, or something
            - need not a*, but djiksra's algorithm probably
                - needed for bfc assignment anyways
            
        - 3.) bfc assignment
            - need evaluate_bfc_quality function
            - tiles are allocated in chunks
            - if this is good enough, this will be all we need!
            - pseudocode below
            
        - 5.) weighted average of all 4 approaches, if BFC approach is weakish
        
        
BFC assignment method for land allocation pseudocode:
    (all matrices here are 2D arrays the same size as the map)

    bfc_allocation (map) {
    
        total_allocation = new blank matrix
        foreach tile in map
            foreach civ
                total_allocation.tile.civ = 0
                tile's distance from each capital is cached
            

        # each local_allocation is one guess on what the map would look like this were an always_peace game            
        for 1..1000 # or 100 or 10000 or whatever
            local_allocation = bfc_allocation_single_step(map)
            
            foreach tile in local_allocation
                foreach civ
                    total_allocation.tile.civ += local_allocation.tile.civ
                    
        # take our 1000 guesses to get a true estimate on how likely it is a particular civ will gain a particular tile
        foreach tile in total_allocation
            foreach civ
                total_allocation.tile.civ /= 1000
            
        return total_allocation
    }
    
    bfc_allocation_single_step (map) {
        local_allocation = new blank matrix 
        allocate capital BFCs in map
        
        num_allocated = num civs
        while (1) {
            if num_allocated == 0
                break 
                
            num_allocated = 0
            foreach civ
                potential_sites = all tiles between 3 and 6 away of any of this civ's cities
                filter potential_sites of any tiles that are less than 3 away of any other civ's cities
                
                foreach tile in potential_sites
                    calculate bfc quality of a city centered on this tile based purely on tile yields
                        - first-ring should be more valuable than second ring
                        - seafood should be rated under equivalent yield of land-tile
                        - should have flags for considering yields of copper/iron/horses
                        - should have flags for considering plantations and jungle-gems
                    
                if potential_sites == 0
                    continue
                    
                foreach bfc 
                    now factor in strategic concerns:
                        - copper's concern increases exponentially for each city after the first, then drops to 0 once copper is   
                          captured
                        - horse's concern increases exponentially for each city after the second, then drops to 0 once horse is 
                          captured
                        - iron's concern increases exponentially for each city after the eighth, then drops to 0 once iron is captured
                        - marble and stone have a high but linearly increasing concern for each city after the 5t, then drop to 0 
                          once they are captured. stone's concern drops off exponentially after the 10th city.
                        - luxuries should be considered whether they are ancient or classical and how many cities have so far
                          been settled
                        - cities closer to the capital are valued more highly than those further from it
                        - cities settled towards closer rivals are valued more highly than those settled away
                            - do we do this based on capitals or what rivals have settled already? not sure. later way is more
                              computationally intensive for sure.
                        - cities on hills are valued more highly if they are closer to rivals
                        
                # now we have a score for each potential site
                
                pick the top 10 sites
                
                total = 0
                foreach site 
                    total += (site's score)^2
                
                foreach site
                    settling_probability = (site's score)^2 / total
                    
                # now we have a settling probability for each site
                pick a random site based on their weight - our "blue circle"
                
                allocate that BFC for that civ onto local_allocation.
                (if the bfc overlaps with the bfc from another civ, these overlapped tiles should be allocated to both)
                num_allocated ++
                
        return local_allocation
    }